#!/bin/bash

#Created by: 	Jake Humphrey
#Created Date:	9/3/2014

#Run setup as root to add this program to the shells PATH

#Description: 	This program generates a makefile for either C++ programs or
#				for C programs. The default is C++. Add -c flag for generating 
#				the makefile for C programming.  Add -e and a name to override the executable
#				name prompt.  Add -s to specify a different compiler to use. Default
#				is g++.  Add -f and a version (format example: c++11) to specify the
#				version of c++ to use.

#This program was tested with: OpenSUSE, Ubuntu
#If there are any issues with this program, contact Jake Humphrey at humphreyja@mnstate.edu

helpmsg() {
	#Description: 	This function outputs the help content for this program.
	#Input:			0/1 -if 1 it will display extended help
	#Error Code: 1
	
	echo "Usage: gen-make [ -e name ] [ -c ]"
	echo "                [ -s compiler name ]"
	echo "                [ -f compile flag ]"
	echo "Try 'gen-make -h' for more information"
	if [ $1 -eq 1 ]; then
		echo "Description:"
		echo "	Generates a makefile with the files located in the current directory"
		echo "Options:"
		echo "	-e (optional) Used to specify an executable name"
		echo
		echo "	-s (optional) sets a different compiler to use"
		echo "	   Default is g++"
		echo 
		echo "	-c (optional) specifies to create the make file for"
		echo "	   compiling C programs.  Default is C++"
		echo
		echo "	-f (optional) specifies the version of c++ to use like c++11"
		echo 
	fi
	exit 1
} 

#VARIABLE DECLARATIONS
#========================================================================

#defaults for makefile
compiler="g++"
defaultfile="*.cpp"
clean='rm -rf *.o $(EXE)'

#makefile standard content
cleanheader="clean:\n\t\t"
exearg=0

#array declarations
declare -a objs
declare -a headers
declare -a cppheaderlist

#creates an array of all the files in the current directory
files=(*)

#END VARIABLE DECLARATIONS
#========================================================================

#argument handler
while getopts ":s: :e: :c :h :f:" opt; do
	case $opt in
	c) 
		#set this flag to generate a make file for C programming
		defaultfile="*.c"
		;;
	f)
		#set this flag to specify a version of c++ to use format: ex: c++11
		cflag="-std=$OPTARG"
		;;
	s)
		#set this flag to use a different compiler than the default g++
		compiler="$OPTARG"
		;;
	e)
		#set this flag to override the prompt and specify an executable name
		exe="$OPTARG"
		exearg=1
		;;
	h)
		#set this flag to output the help content for this program
		helpmsg 1
		;;
	\?)
		echo "ERROR: Invalid option: -$OPTARG"
		helpmsg 0
		;;
	esac
done

shift $(($OPTIND-1))

#Fills object array and header array
for f in "${files[@]}"
do
	if [[ $f == $defaultfile ]]; then
		objsmap+=("$f ${f%%.*}.o")
		objs+=("${f%%.*}.o")
	elif [[ $f == *.h ]]; then
		headers+=("$f")
	fi
done

#Exits the program if no .cpp or .c program files are found
if [ ${#objs[@]} -lt 1 ]; then
	echo "ERROR: No $defaultfile files found"
	helpmsg 0
fi

#prompts the user to specify an executable name
if [ $exearg -eq 0 ]; then
	echo -ne "Please specify an executable name: "
	read exe
fi

#creates a bare makefile 
echo "Creating makefile..."
if [ -a makefile ]; then
	rm makefile
fi
touch makefile

#exits if the creation of the make file failed
if [ $? -ne 0 ]; then
	echo "Error creating file.  Do you have permission?"
	exit 1
fi

#Builds the variable section and executable section of the make file
echo "CC= $compiler" >> makefile
echo "OBJECTS= ${objs[@]}" >> makefile
echo "EXE= $exe" >> makefile
echo "CFLAGS= $cflag" >> makefile
echo >> makefile
echo -e '$(EXE):\t\t$(OBJECTS)' >> makefile
echo -e '\t\t$(CC) -o $(EXE) $(OBJECTS)' >> makefile


#Builds the object compiling section of the make file
for o in "${objsmap[@]}"
do
	unset cppheaderlist
	for h in "${headers[@]}"
	do
		cppfilename=$(echo "${o[0]}" | awk '{print $1}')
		cat $cppfilename | grep -q "$h"
		if [ $? -eq 0 ]; then
			cppheaderlist+=("$h")
		fi
	done
	
	objname=$(echo "${o[0]}" | awk '{print $2}')
	cppname=$(echo "${o[0]}" | awk '{print $1}')
	echo -e "$objname:\t\t$cppname ${cppheaderlist[@]}" >> makefile
	echo -e -n '\t\t$(CC) -c ' >> makefile
	echo -e "$cppname" >> makefile
done

#Builds the clean section of the make file
echo -e -n "$cleanheader" >> makefile
echo "$clean" >> makefile

exit 0